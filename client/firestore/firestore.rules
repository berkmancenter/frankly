rules_version = '2';

service cloud.firestore {
    // See https://stackoverflow.com/questions/52641934/firebase-firestore-security-rules-for-public-and-private-collections
    match /databases/{database}/documents {

        function hasAuth() {
            return request.auth != null && request.auth.uid != null;
        }

        function isDocCreator(doc) {
            return hasAuth() && request.auth.uid == doc.data['creatorId'];
        }

        function isPublic() {
            return resource.data.get('isPublic', false) == true;
        }

        function isParticipant(discussionPath) {
            return hasAuth() && get(path(discussionPath + '/discussion-participants/' + request.auth.uid)).data['status'] == 'active';
        }

        function getOrDefault(doc, key, defaultValue) {
            let result = (doc == null || doc.data == null) ? null : doc.data.get(key, defaultValue);
            return (result == null) ? defaultValue : result;
        }

        function getMembershipStatus(juntoId) {
            let statusDoc = get(/databases/$(database)/documents/memberships/$(request.auth.uid)/junto-membership/$(juntoId));
            return getOrDefault(statusDoc, 'status', 'nonmember');
        }

        function isJuntoCreator(juntoId) {
            return hasAuth()
                   && getAfter(/databases/$(database)/documents/junto/$(juntoId)).data.get('creatorId', '') == request.auth.uid;
        }

        function isOwner(status) {
            return status in ['owner'];
        }

        function isAdmin(status) {
            return status in ['owner', 'admin'];
        }

        function isMod(status) {
            return status in ['owner', 'admin', 'mod'];
        }

        function requiresApprovalToJoin(juntoId) {
            return 'requireApprovalToJoin' in getOrDefault(get(/databases/$(database)/documents/junto/$(juntoId)), 'enabledFeatureFlags', []);
        }

        // TODO: Figure out why this is causing updating membership to fail on juntos that require
        // approval
        function hasApprovalToJoin(juntoId) {
            // let approvalStatus = getOrDefault(get(/databases/$(database)/documents/junto/$(juntoId)/join-requests/$(request.auth.uid)), 'status', '');
            return true;
        }

        match /testing/{testDoc} {
            allow read: if true;
            allow write: if false;
        }

        match /external-partners/{partner} {
            allow read: if hasAuth();
            allow write: if false;
        }

        match /publicUser/{userId} {
            allow create: if hasAuth() && request.auth.uid == userId;
            allow delete: if hasAuth() && request.auth.uid == userId;
            allow update: if hasAuth() && request.auth.uid == userId && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['appRole']));

            allow get: if hasAuth();
            allow list: if request.query.fields.size() == 1 && request.query.fields.hasAll(['agoraId']);
        }


        match /publicUser/{userId}/junto-tags/{tagId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow read: if hasAuth();
        }

        match /privateUserData/{userId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow get: if hasAuth() && request.auth.uid == userId;
        }

        match /privateUserData/{userId}/juntoUserSettings/{juntoId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow get: if hasAuth() && request.auth.uid == userId;
        }

        // Junto-Tag collection group
        match /{path=**}/junto-tags/{tagId} {
            allow list: if hasAuth();
        }

        // Topic collection group for featured topics query
        // TODO: Secure this so that topics from private juntos are not accessible.
        match /{path=**}/topics/{topicId} {
            allow list: if hasAuth();
        }

        // NOT TESTED
        // Discussion collection group
        match /{path=**}/discussions/{discussionId} {
            allow list: if hasAuth() && isPublic();
            allow list: if hasAuth() && isDocCreator(resource);
            allow list: if hasAuth() && isAdmin(getMembershipStatus(resource.data.juntoId));
            // Figure out how to list based on participant status.
            // allow list: if hasAuth() && isParticipant(getDiscussionPath());
            allow list: if hasAuth();
        }

        // NOT TESTED
        // Participants collection group
        match /{path=**}/discussion-participants/{participantId} {
            allow list: if hasAuth() && resource.data['id'] == request.auth.uid;
        }

        // Junto
        match /junto/{juntoId} {
            function isJuntoMember(juntoId) {
                let memberSet = ['member', 'facilitator', 'mod', 'admin', 'owner'].toSet();
                return hasAuth() && getMembershipStatus(juntoId) in memberSet;
            }

            function isJuntoMod() {
                return hasAuth() && isMod(getMembershipStatus(juntoId));
            }

            function isJuntoAdmin() {
                return hasAuth() && isAdmin(getMembershipStatus(juntoId));
            }

            // In order to show on screen when a chat comes from an admin we include their current membership level
            // in all chats. This verifies that what the document claims is their membership, is in fact their membership.
            function verifyMembershipSnapshot() {
                let status = getOrDefault(request.resource, 'membershipStatusSnapshot', null);

                return !isMod(status) || (isMod(status) && getMembershipStatus(juntoId) == status);
            }

            allow create: if false;
            allow update: if false;

            allow get: if hasAuth();

            allow list: if hasAuth() && isPublic();
            allow list: if hasAuth() && request.auth.uid in resource.data.get('members', []);
            allow list: // TODO: Figure out a way to handle looking up juntos display ID.
            // This is required currently since we list juntos by display ID.
                if true;

            // Discussion Threads
            match /discussion-threads/{discussionThreadId} {
                allow read, write: if hasAuth();

                // Discussion Thread Comments
                match /discussion-thread-comments/{discussionThreadCommentId} {
                    allow read, write: if hasAuth();
                }
            }

            // Chat
            match /chats/{messageId=**} {
                allow create: if isJuntoMember(juntoId) && isDocCreator(request.resource)
                                 && verifyMembershipSnapshot();

                allow update: if hasAuth() && (isDocCreator(resource) || isJuntoMod());

                allow read: if hasAuth();
            }

            // Featured
            match /featured/{featuredId=**} {
                allow write: if isJuntoAdmin();
                allow read: if hasAuth();
            }

            // Announcements
            match /announcements/{annoucementId} {
                allow create: if isJuntoAdmin() && isDocCreator(request.resource);
                allow update: if isJuntoAdmin();

                allow read: if hasAuth();
            }

            // Resources
            match /junto-resources/{resourceId} {
                allow write: if isJuntoAdmin();
                allow read: if hasAuth();

                // Resources-tags
                match /junto-tags/{tagId} {
                    allow write: if isJuntoAdmin();
                    allow read: if hasAuth();
                }
            }

            // Junto-Tags
            match /junto-tags/{tagId} {
                allow write: if isJuntoAdmin();
                allow read: if hasAuth();
            }

            match /topics/{topicId} {
                // TODO: Update topic creation to check the Junto feature flags for unofficial topics.
                allow create: if isJuntoMember(juntoId) && isDocCreator(request.resource);
                allow update: if isJuntoMod() || isDocCreator(request.resource);

                allow read: if hasAuth();

                function getTopicData() {
                    return get(/databases/$(database)/documents/junto/$(juntoId)/topics/$(topicId));
                }

                // Topic Junto-Tags
                match /junto-tags/{tagId} {
                    allow write: if (isJuntoMod() || isDocCreator(getTopicData()));
                    allow read: if hasAuth();
                }

                // Discussions and live meetings
                match /discussions/{discussionId} {

                    function getDiscussionData() {
                        return get(/databases/$(database)/documents/junto/$(juntoId)/topics/$(topicId)/discussions/$(discussionId));
                    }

                    function getDiscussionDataAfter() {
                        return getAfter(/databases/$(database)/documents/junto/$(juntoId)/topics/$(topicId)/discussions/$(discussionId));
                    }

                    function getDiscussionPath() {
                        return '/databases/' + database + '/documents/junto/' + juntoId + '/topics/' + topicId + '/discussions/' + discussionId;
                    }

                    function isHosted() {
                        let discussionData = getDiscussionData().data;

                        // TODO(danny): Test this 'hosted' codepath
                        let discussionType = discussionData.get('discussionType', null);
                        let liveStreamInfo = discussionData.get('liveStreamInfo', null);

                        // Legacy discussions may have discussionType == null so we can tell they are
                        // hosted if they dont have livestreaminfo.
                        return discussionType == 'hosted' || (discussionType == null && liveStreamInfo == null);
                    }

                    // User can create a public discussion if they are a member of that Junto.
                    // OR
                    // They can create a private one even if they aren't a member.
                    allow create: if (isJuntoMember(juntoId) || request.resource.data.get('isPublic', false) == false)
                                     && isDocCreator(request.resource);

                    allow update: if isDocCreator(resource)
                                     || isJuntoMod()
                                     || juntoId == 'unify-america';

                    allow list: if hasAuth() && isPublic();
                    allow list: if hasAuth() && isDocCreator(resource);
                    allow list: if hasAuth() && isParticipant(getDiscussionPath());

                    allow get: if hasAuth();

                    match /discussion-participants/{participantId} {
                        allow write: if isJuntoMod()
                                        || isDocCreator(getDiscussionDataAfter())
                                        || request.auth.uid == participantId;

                        allow read: if hasAuth() && (isHosted() || isJuntoMod() || request.auth.uid == participantId);
                    }

                    // Chat
                    match /chats/{messageId=**} {
                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());

                        allow create: if hasAuth() && verifyMembershipSnapshot() && (isParticipant(getDiscussionPath()) || isJuntoMod());

                        allow update: if hasAuth() && (isDocCreator(resource) || isJuntoMod());
                    }

                    // Discussion Messages
                    match /discussion-messages/{discussionMessageId} {
                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());
                        allow delete: if hasAuth() && (isDocCreator(resource) || isJuntoMod());
                    }

                    // User Suggestions
                    match /user-suggestions/{suggestionId} {
                        function onlyVotedYourself(field) {
                            let original = resource.data.get(field, []).toSet();
                            let updated = request.resource.data.get(field, []).toSet();

                            let originalDiff = original.difference(updated);
                            let updatedDiff = updated.difference(original);

                            let combinedDiff = updatedDiff.union(originalDiff);
                            return combinedDiff.size() == 0 || combinedDiff == [request.auth.uid].toSet();
                        }

                        allow create: if hasAuth() && isDocCreator(request.resource) && (isParticipant(getDiscussionPath()) || isJuntoMod());
                        allow update: if hasAuth() && (isDocCreator(resource) || (onlyVotedYourself('upvotedUserIds') && onlyVotedYourself('downvotedUserIds')));
                        allow delete: if hasAuth() && (isDocCreator(resource) || isJuntoMod() || isDocCreator(getDiscussionData()));
                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());
                    }

                    match /live-meetings/{meetingId} {
                        allow create, update: if hasAuth() && (isDocCreator(getDiscussionDataAfter()) || isJuntoMod() || juntoId == 'unify-america');

                        allow get: if hasAuth() && (isDocCreator(getDiscussionData()) || isJuntoMod());
                        allow get: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());

                        match /breakout-room-sessions/{sessionId=**} {
                            allow create, update: if hasAuth() && (isDocCreator(getDiscussionDataAfter()) || isJuntoMod());

                            allow read: if hasAuth() && isDocCreator(getDiscussionData());
                            allow read: if hasAuth() && isParticipant(getDiscussionPath());
                            allow read: if hasAuth() && isJuntoMod();

                            match /breakout-rooms/{breakoutRoomId} {
                                match /live-meetings/{liveMeetingId} {
                                    match /participant-agenda-item-details/{agendaItemId}/participant-details/{userId} {
                                        allow write: if hasAuth() && (request.auth.uid == userId || isJuntoMod() || isDocCreator(getDiscussionData())) && isParticipant(getDiscussionPath());
                                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());
                                    }

                                    // TODO: Only allow reading and writing if you are in this breakout room
                                    match /chats/{chatId}/messages/{messageId} {
                                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());

                                        allow create: if hasAuth() && verifyMembershipSnapshot() && isDocCreator(request.resource) && (isParticipant(getDiscussionPath()) || isJuntoMod());

                                        allow update: if hasAuth() && (isDocCreator(resource) || isJuntoMod());
                                    }

                                    match /proposals/{proposalId} {
                                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod()) && resource.data.get('targetUserId', null) != request.auth.uid;
                                    }

                                    match /user-suggestions/{suggestionId} {
                                        function onlyVotedYourselfBreakouts(field) {
                                            let original = resource.data.get(field, []).toSet();
                                            let updated = request.resource.data.get(field, []).toSet();

                                            let originalDiff = original.difference(updated);
                                            let updatedDiff = updated.difference(original);

                                            let combinedDiff = updatedDiff.union(originalDiff);
                                            return combinedDiff.size() == 0 || combinedDiff == [request.auth.uid].toSet();
                                        }

                                        allow create: if hasAuth() && isDocCreator(request.resource) && (isParticipant(getDiscussionPath()) || isJuntoMod());
                                        allow update: if hasAuth() && (isDocCreator(resource) || (onlyVotedYourselfBreakouts('upvotedUserIds') && onlyVotedYourselfBreakouts('downvotedUserIds')));
                                        allow delete: if hasAuth() && (isDocCreator(resource) || isJuntoMod() || isDocCreator(getDiscussionData()));
                                        allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());
                                    }
                                }
                            }
                        }

                        match /user-agenda-items-progress/{userId} {
                            allow write, read: if hasAuth() && request.auth.uid == userId && isParticipant(getDiscussionPath());
                            allow read: if hasAuth() && (isDocCreator(getDiscussionDataAfter()) || isJuntoMod());
                        }

                        match /participant-agenda-item-details/{agendaItemId}/participant-details/{userId} {
                            allow write: if hasAuth() && (request.auth.uid == userId || isJuntoMod() || isDocCreator(getDiscussionData())) && isParticipant(getDiscussionPath());
                            allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod());
                        }

                        match /ratings/{userId} {
                            allow write, read: if hasAuth() && request.auth.uid == userId && isParticipant(getDiscussionPath());
                        }

                        match /proposals/{proposalId} {
                            allow read: if hasAuth() && (isParticipant(getDiscussionPath()) || isJuntoMod()) && resource.data.get('targetUserId', null) != request.auth.uid;
                        }
                    }

                    match /private-live-stream-info/{liveStreamId} {
                        allow read: if hasAuth() && isJuntoAdmin();
                        allow create: if hasAuth() && isJuntoAdmin();
                    }
                }
            }

            match /join-requests/{userId} {
                allow get: if hasAuth() && (request.auth.uid == userId || isJuntoMod());
                allow create: if hasAuth() && request.auth.uid == userId && request.resource.data.get('status', '') == 'requested';
                allow list: if hasAuth() && isJuntoMod();
                allow update: if false;
            }
        }

        // JuntoTagDefinition
        match /junto-tag-definitions/{definitionId} {
            allow get, create, list: if hasAuth();
        }

        // JuntoTagDefinition
        match /junto-tag-definitions/{definitionId} {
            allow get, create, list: if hasAuth();
            allow update: if false;
        }

        match /{path=**}/junto-membership/{juntoId} {
            allow list: if request.auth != null;
        }

        match /memberships/{userId}/junto-membership/{juntoId} {
            // Verify user can make more elevated membership changes
            function canChangeElevatedMembership(targetStatus) {
                let requesterStatus = getMembershipStatus(juntoId);
                let currentStatus = getOrDefault(resource, 'status', 'nonmember');

                // Owners can modify existing members
                return isSuperAdmin() || (currentStatus != 'nonmember' && (isOwner(requesterStatus) || (isAdmin(requesterStatus) && !('owner' in [targetStatus, currentStatus]))));
            }

            function isSuperAdmin() {
                let verified = request.auth.token.email_verified;
                let isKazmDotCom = request.auth.token.email.matches('.*@kazm[.]com$') || request.auth.token.email.matches('.*@myjunto[.]app$');
                return verified && isKazmDotCom;
            }

            function canChangeSelfStatus(targetStatus) {
                // Statuses that can be self-set by anyone
                let requiresApproval = requiresApprovalToJoin(juntoId) && !hasApprovalToJoin(juntoId);
                let selfStatuses = (requiresApproval == true) ? ['attendee', 'nonmember'] : ['member', 'attendee', 'nonmember'];

                return (targetStatus in selfStatuses) || (targetStatus == 'owner' && resource == null && isJuntoCreator(juntoId));
            }

            function isValidMemberUpdate() {
                let targetStatus = getOrDefault(request.resource, 'status', null);
                return (userId == request.auth.uid && canChangeSelfStatus(targetStatus)) || canChangeElevatedMembership(targetStatus);
            }

            allow read: if request.auth.uid != null;
            allow write: if hasAuth() && isValidMemberUpdate();
        }

        match /external-partners/{partnerId} {
            // Currently writes are handled manually in firebase console web UI.
            allow write: if false;
            allow read: if hasAuth();
        }

        match /partner-agreements/{id} {

            function checkInitialUserId() {
                let initialUserId = getOrDefault(resource, 'initialUserId', null);
                return initialUserId == null || initialUserId == request.auth.uid;
            }

            allow write: if false;

            // Allow read if user is admin of linked junto, or (if no linked junto) if user is the person who initiated onboarding
            allow read: if hasAuth() && (getOrDefault(resource, 'juntoId', null) == null && checkInitialUserId()) || isAdmin(getMembershipStatus(resource.data.juntoId));
        }

        match /stripeUserData/{userId} {
            allow write: if false;
            allow get: if hasAuth() && request.auth.uid == userId;

            match /subscriptions/{subscriptionId} {
                allow write: if false;
                allow get: if hasAuth() && request.auth.uid == userId;
                allow list: if hasAuth() && request.auth.uid == userId;
            }
        }

        match /plan-capability-lists/{id} {
            allow list: if false;
            allow write: if false;
            allow read: if false;
        }
    }
}