{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc23 Introduction","text":"<p>Welcome to the Frankly repo!</p> <p>Frankly is an online deliberations platform that allows anyone to host video-enabled conversations about any topic. Key functionalities include:</p> <ul> <li>Matching participants into breakout rooms based on survey questions</li> <li>Creating structured event templates with different activities to take participants through</li> </ul> <p>Frankly is a Flutter app with a Firebase backend.</p>"},{"location":"#overview","title":"Overview","text":"<p>\ud83e\udea7 This README includes the following sections:</p> <ul> <li>Overview: An overview of the contents of the README and a description of the contents of major directories in the repo.</li> <li>Running Frankly Locally for Development: Instructions for setting up and running the app locally.</li> <li>Testing</li> <li>Hosting Your Own Instance of Frankly: Instructions for setting up a full production-ready instance of the app.</li> <li>Troubleshooting and FAQ</li> </ul>"},{"location":"#repo-contents","title":"Repo contents","text":"<p>This subsection provides a description of the contents of major directories in the repo. \ud83d\udca1 Important note: For the rest of this README, most terminal commands should be executed from within the <code>client</code> directory (or subdirectories of it when specified).</p> <ul> <li> <p><code>client</code>   The main Flutter app.</p> </li> <li> <p><code>data_models</code>   These are the data models used by both the client and Firestore.</p> </li> <li> <p><code>firebase/functions</code>   These are the Firebase Functions which are deployed on Google Cloud and called by the Flutter app. Firebase functions are built on top of Cloud Functions.</p> </li> <li> <p><code>firestore/firestore.rules</code>   This is a Firestore security rules file which defines which Firestore documents are readable by which users.</p> </li> <li> <p><code>matching</code>   Contains <code>lib/matching.dart</code>, which is the logic for matching participants into breakout rooms. See the README in this directory for links to helpful documentation on matching.</p> </li> </ul>"},{"location":"dev/","title":"\u2699\ufe0f Running Local Development Version","text":"<p>Most components of Frankly can be run on your local machine. This section describes how to setup and run the Flutter client app and the Firebase emulators (which can be setup in place of a Firebase/GCP project). The app still connects to several third-party services, which are also described below.</p>"},{"location":"dev/#tools-and-flutter-setup","title":"Tools and Flutter Setup","text":"<p>Important</p> <p>Frankly runs on Flutter <code>3.22.2.</code> Please use this version of Flutter in order to avoid any unexpected errors.</p> <p>This section covers setting up a new computer for Flutter development.</p>"},{"location":"dev/#part-1-platform-specific","title":"Part 1: Platform-specific","text":"macOSLinux <ol> <li>Download and install Google Chrome here if it\u2019s not already pre-installed. This is used for live debugging on web.</li> <li>Download and install XCode from the Mac App Store. This is used for developing iOS apps and running on macOS as a desktop app.</li> <li>Optional, but recommended: Install Homebrew here.</li> <li>Xcode should've installed git automatically, but if not for some reason, you can install it via Homebrew:   <pre><code>brew install git\n</code></pre></li> <li>Clone the Frankly repo in a directory where you prefer your projects to live:   <pre><code>git clone https://github.com/berkmancenter/frankly &amp;&amp; cd frankly\n</code></pre></li> <li>Follow the instructions here to install Flutter on your machine. You can choose iOS as your target platform.<ul> <li>This includes a link to install CocoaPods. However, you may run into issues with installing CocoaPods due to a Ruby version issue (the pre-installed Ruby on MacOS is too old). You can install ruby via Homebrew instead by running <code>brew install cocoapods</code>, which should alleviate those errors.</li> <li>Recommended: Install the Flutter SDK in your home folder under a directory called <code>dev</code> (or something similar).</li> </ul> </li> <li>Install VSCode here.<ul> <li>Recommended: Install the Flutter VSCode extension and use the extension to install Flutter via VSCode.</li> </ul> </li> <li>Add Flutter to your PATH. For Mac with Zsh (you can also copy this command from here), create or open ~/.zshenv and add this line:     <pre><code>export PATH=$HOME/dev/flutter/bin:$PATH\n</code></pre>     Restart terminal sessions to see the changes.</li> </ol> <ol> <li>Download and install chromium and git if they're not already installed. Chromium is used for live debugging on web.   <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade &amp;&amp; sudo apt-get install -y chromium git\n</code></pre>   a. Set the path to chromium so flutter can find it:   <pre><code>export CHROME_EXECUTABLE=$(which chromium)\n</code></pre></li> <li>Clone the Frankly repo in a directory where you prefer your projects to live:   <pre><code>git clone https://github.com/berkmancenter/frankly &amp;&amp; cd frankly\n</code></pre></li> <li>Follow the instructions here to install Flutter dependencies on your machine. You can choose web as your target platform.</li> <li> <p>Install VSCode here.</p> <p>You may need to download the binary for your specific architecture here</p> <ul> <li>Recommended: Install the Flutter VSCode extension and use the extension to install Flutter via VSCode.</li> <li>Recommended: Install the Flutter SDK in your home folder under a directory called <code>dev</code> (or something similar).</li> </ul> </li> <li> <p>You will probably need to add both flutter and dart to your PATH. Run:     <pre><code>export PATH=\"$PATH:$HOME/[path to flutter]/flutter/bin\"\n</code></pre></p> </li> </ol>"},{"location":"dev/#part-2","title":"Part 2","text":"<ol> <li>Install Node.js and npm. We strongly recommend that you do this via <code>nvm</code> (steps here) since it is the easiest end cleanest way to do so.</li> <li>Once nvm is installed and sourced to your CLI profile, run:   <pre><code>nvm install --lts\n</code></pre></li> <li> <p>Install the Firebase CLI Tools: Most of the operations for development and deployment take place via the Firebase CLI. You can find documentation for the Firebase CLI here.   <pre><code>npm install -g firebase-tools\n</code></pre></p> <ul> <li> <p>You may run into permissions issues when installing this due to being a non-root user. To remedy this, reassign ownership of the relevant folders to yourself by running the following 2 commands before running <code>npm install</code> :    <pre><code> sudo chown -R $USER /usr/local/bin/ &amp;&amp; sudo chown -R $USER /usr/local/lib/node_modules\n</code></pre></p> <p>For more information, you can read this Stack Overflow post.</p> </li> </ul> </li> <li> <p>Activate the Firebase CLI for Flutter by following these steps. </p> <p>a. Sign into Firebase using your Google account and create a new project. Use a name like \"frankly-dev\".</p> <p>b. Log into Firebase. Run:   <pre><code>firebase login\n</code></pre> c. Install the FlutterFire CLI by running:   <pre><code>dart pub global activate flutterfire_cli\n</code></pre> d. From your Flutter project directory (<code>client</code>), run the to start the app configuration workflow:   <pre><code>flutterfire configure\n</code></pre>   - You can choose web as the platform for now.</p> </li> </ol> <p>Please check \u2753Troubleshooting / FAQ for suggested resolutions to common Flutter installation errors.</p>"},{"location":"dev/#environment-setup","title":"Environment Setup","text":"<p>These are the steps for getting started with developing Frankly:</p> <ol> <li>\ud83d\udce6 Build the data models</li> <li>\ud83d\udd25 Setting up and connecting to the Firebase emulators</li> <li>\ud83d\udd0c Connecting to third-party services</li> <li>\ud83d\udc26 Running the frontend Flutter app</li> </ol> <p>The following section will cover these steps for running the app for the first time.</p>"},{"location":"dev/#data-models","title":"\ud83d\udce6 Data Models","text":"<p>The first step in running the app is to build the data_models package. Some code in this package is auto-generated by Freezed. Run the following steps in the <code>data_models</code> directory to generate code and make the package available to the client and Firebase functions:</p> <ol> <li>To install all Dart dependencies run:   <pre><code>flutter pub get\n</code></pre></li> <li>Run:    <pre><code>dart run build_runner build --delete-conflicting-outputs\n</code></pre></li> </ol> <p>You can also just run <code>./build.sh</code>.</p>"},{"location":"dev/#firebase","title":"\ud83d\udd25 Firebase","text":""},{"location":"dev/#firebase-functions-installation","title":"Firebase Functions Installation","text":"<p>Firebase Functions are built on top of Cloud Functions (GCP's serverless functions product), which is why there are references to Cloud Functions tooling below. Functions are written in <code>dart</code> and are compiled to <code>javascript</code> with <code>dart2js</code>.</p> <p>For the following sub-section, switch to the <code>firebase/functions</code> directory to run all commands.</p> <ul> <li>To install all Javascript dependencies, run:   <pre><code>npm install\n</code></pre></li> <li>To install all Dart dependencies, run:   <pre><code>flutter pub get\n</code></pre></li> </ul> <p>You don't need to run <code>npm install</code> again unless you've added new dependencies or made updates to existing ones. Same applies to <code>flutter pub get</code>, but for changes to any function dependencies.</p>"},{"location":"dev/#emulators","title":"Emulators","text":"<p>Firebase has a full suite of emulators called Firebase Local Emulator Suite. You can find the full description of the Firebase Local Emulator Suite and its capabilities here.</p> <p>You should emulate services locally for development purposes, and set up the client to use these emulators instead of connecting to a live Firebase project. By default, the emulators will run against the default project \"dev,\" specified in the <code>.firebaserc</code> file.</p> <p>Using config in emulators</p> <p>You do not need to run <code>functions:config:set.</code> as the emulators are configured by a file.</p> <ul> <li>To configure the emulators, create the file <code>firebase/functions/.runtimeconfig.json</code>.</li> <li>A sample file containing the config properties described above can be found in <code>firebase/functions/.runtimeconfig.json.local.example</code>.</li> </ul> <p>Running the emulators</p> <p>Important</p> <p>Do this before running the client.</p> <p>To run the emulators locally, run the following while in the <code>firebase/functions</code> directory:</p> <pre><code>dart run build_runner build --output=build\nfirebase emulators:start --only firestore,functions,auth,pubsub,database\n</code></pre> <p>You can also just run <code>npm run emulators</code>.</p> <p>We recommend using the emulators import and export functionality to make development easier.</p> <p>Please refer to the Cloud Functions Emulator section at \u2753Troubleshooting / FAQ for common issues and resolutions!</p>"},{"location":"dev/#optional-setup-firebase-cloud-project","title":"Optional: Setup Firebase Cloud Project","text":"<p>In order to allow the capability to run the app locally without needing to create/modify a live Firebase project, emulators for all Google Cloud services that are needed (Functions, Auth, Realtime Database, etc.) suffice for most development task.</p> <p>If you plan on using Mux within your local app, however, the emulator version of the functions host is inadequate, since that service needs an actual deployed URL to send webhooks  to. You will need a Firebase project of your own. </p> <ol> <li>Create a new Firebase project here .</li> <li>Make a note of the unique ID that is created for your project. It will be in the format of <code>my-dev-project-d2f8c</code>.</li> <li>You may need to create a default realtime database. </li> <li> <p>From your command line within the <code>firebase/functions</code> directory, run:     <pre><code>firebase login\n</code></pre></p> <p>Logging In</p> <p>When the login window appears, ensure you are logging in as the same user that created your project.</p> </li> <li> <p>Now run:   <pre><code>firebase use &lt;project_id&gt;\n</code></pre>   You should see a message like <code>Now using project my-dev-project-d2f8c</code></p> </li> </ol> <p>You can follow the official documentation  to find out how to deploy, but you might use a command like this: <code>firebase deploy --only functions</code>.</p>"},{"location":"dev/#third-party-services","title":"\ud83d\udd0c Third Party Services","text":"<p>The Firebase Functions and/or Flutter client app connect to the following third party services, which must be set up and configured for local development.</p>"},{"location":"dev/#agora","title":"Agora","text":"<p>Sign up for Agora and open the Agora console. The following instructions are geared towards using V2 of the Agora console.</p> <p>The following instructions will guide you through retrieving the values to fill in the following command for setting Agora-related values in your Functions configuration:</p> <pre><code>agora.app_id=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.app_certificate=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.rest_key=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.rest_secret=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.storage_bucket_name=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.storage_access_key=\"&lt;YOUR_VALUE_HERE&gt;\"\nagora.storage_secret_key=\"&lt;YOUR_VALUE_HERE&gt;\"\n</code></pre>"},{"location":"dev/#setting-up-the-integration","title":"\ud83d\udd27 Setting up the integration","text":"<ul> <li> <p>Agora   Create a new project in the Agora console. For Authentication Mode, select Secure Mode: App ID + Token.</p> </li> <li> <p><code>app_id</code>: Copy the App ID from the Projects list in the console home.</p> </li> <li><code>app_certificate</code>: Select Configure on your project. Copy the value under Security &gt; Primary Certificate.</li> <li><code>rest_key</code>: In the left navigation panel, select Restful API under either Developer Toolkit or Developer Resources, depending on your screen size. Click Add a Secret. Download the Customer Secret, and input the value for Key.</li> <li> <p><code>rest_secret</code>: From the Customer Secret file, input the value for Secret.</p> </li> <li> <p>Google Cloud Storage   Create a Google Cloud Storage bucket to store event recordings. Navigate to Google Cloud Storage and select Create a Bucket. Provide a bucket name. Then, configure the bucket with your desired settings for the remaining options.</p> </li> <li><code>storage_bucket_name</code>: Enter the bucket name you selected.</li> <li><code>storage_access_key</code>: Select Settings under the Cloud Storage left-side settings panel. Click on the Interopability tab. You may choose to either create an access key for a service account, or create a key for your user account. For whichever method you have opted to use, select Create a Key. Then, paste the generated Access key here.</li> <li><code>storage_secret_key</code>: From the generated key, paste the Secret.</li> <li>In the codebase   In <code>client/lib/app/community/admin/conversations_tab.dart</code>, change the URIs in the <code>_buildRecordingSection</code> method (replacing the ASML values appearing ahead of <code>/us-central1/downloadRecording</code>) to reflect your staging and prod Firebase project IDs.</li> </ul>"},{"location":"dev/#testing-the-integration","title":"\ud83d\udc7e Testing the integration","text":"<p>Once you have the keys set up, you can follow the below checklist to test that key behaviors that depend on Agora are working successfully.</p> <ul> <li> Basic video functionality: Create a community, start an event, and join the event from two different browser windows with two different users. Verify that when video and audio are enabled, both parties can see and hear each other.</li> <li> Mobile size: Verify that video still works on mobile size.</li> <li> Adjusting AV settings: In the bottom navigation bar, adjust your microphone and video input. Verify that the change occurs successfully.</li> <li> Breakout rooms: Start breakout rooms. Verify that users are assigned to breakout rooms and video still works.</li> <li> Recording: Record the meeting by going into Settings and toggling the \"Recording\" option on before joining the event. After joining the meeting, verify that the top right corner says \"Recording\".</li> <li> Go to your Settings view, select Conversations, and select 'Download'. Verify that a .zip file should be downloaded with several different files, including audio and video.</li> <li> Bottom navigation: Interact with everything on the bottom navigation bar, including chat and emoji reactions. Verify that behavior works as expected.</li> <li> Show participant info: In the right side bar, click on a participant to show their user info. Verify that user details show as expected.</li> <li> Kicking a user: In a hosted meeting, kick a user. Verify that the host sees the user disappear, and the user should see that they are banned if they try to navigate back to the event.</li> </ul>"},{"location":"dev/#optional-mux","title":"Optional: Mux","text":""},{"location":"dev/#setting-up-the-integration_1","title":"\ud83d\udd27 Setting up the integration","text":"<p>Mux streaming is used when a customer wants to stream video from a third party streaming service, such as Zoom, to Frankly. Essentially the customer will record video from the third party platform, the data is sent to Mux, which will then notify Frankly's MuxWebhook Firebase function that a stream has started. Once the stream has started, the Frankly event page will display the streaming video.</p> <ol> <li> <p>Using Mux's instructions, get a new access token. Use the environment of your choice and set the permission level to \"Mux Video\".</p> </li> <li> <p>Set up Mux secrets for your local development environment, either by running the firebase command line or copying and pasting the information.</p> Command LineCopy/Paste <p>As the names suggest, the mux.token_id corresponds to your Mux token ID and mux.secret corresponds to your Mux token secret. <pre><code>firebase functions:config:set mux.secret=\"&lt;YOUR_VALUE_HERE&gt;\" mux.token_id=\"&lt;YOUR_VALUE_HERE&gt;\"\n</code></pre></p> <p>Or, paste your token and secret into the <code>.runtimeconfig.json</code> file where the <code>mux</code> field is. <pre><code>  \"mux\": {\n    \"secret\": \"...\",\n    \"token_id\": \"...\"\n  },\n</code></pre></p> </li> <li> <p>To connect Mux to the MuxWebhooks cloud function, the function first needs to be deployed to your Google Cloud Project. Get the URL of the deployed function provided by Google Cloud, which should resemble this format: https://us-central1-myproject.cloudfunctions.net/MuxWebhooks.</p> </li> <li>Login to Mux and go to Settings &gt; Webhooks. Select the environment for which you want to use the webhook, then click \u201cCreate new webhook.\u201d For the URL to Notify field, provide the URL for your deployed MuxWebhooks function. Then click \"Create webhook.\"</li> </ol>"},{"location":"dev/#testing-your-setup","title":"\ud83d\udc7e Testing your setup","text":"<p>You can verify the integration is working by manually triggering a new call directly from Mux.</p> <ul> <li> Visit your Google Cloud Platform Logging page so you can scan for any errors and expected logs during the live stream test.</li> <li> In the Mux dashboard, go to Video &gt; Live Streams. Click \"Create your first live stream.\"</li> <li> Run the default request.</li> </ul> <p>The following should be true if your Mux setup works as expected: The logs displayed on the Logging page should indicate that the MuxWebhook Firebase function was called. You can filter the logs by function name in the Google Cloud Console to find logs associated to this function. When viewing the logs, you will likely observe the following error message: <code>\"Error: Unexpected number of documents matching livestream ID\"</code>. This is due to the liveStreamId not matching an id associated to an existing LiveStreamInfo.kFieldMuxId value in the database. This is an expected error. For more thorough testing, we recommend the steps below.</p> <p>(Recommended) You can also use the following steps to set up a live stream in Zoom and test your Mux integration end-to-end:</p> <ol> <li>Create a new event in Frankly and configure it for livestreaming using steps 1-2 in these instructions.</li> <li>Open Zoom and verify you have livestreaming enabled using these steps. Then follow these steps to setup your livestreaming event on Zoom. Use the following values:</li> <li>For Stream URL, use the Stream URL provided on the Frankly event page.</li> <li>For Stream Key, use the Stream Key provided on the Frankly event page.</li> <li>For \u201cLive streaming page URL,\u201d use the page URL of the event setup page where you got the Streaming values above. The URL should look like this: https://gen-hls-bkc-7627.web.app/space//discuss/?status=joined <li>Visit your Google Cloud Platform Logging page so you can scan for any errors during the live stream test.</li> <li>When you are ready, start the live stream on Zoom using these steps</li> <p>The following should be true if your Mux setup works as expected:</p> <ul> <li>The live streaming page on Frankly is now showing your streaming video from Zoom</li> <li>The logs displayed on the Logging page should not display any errors related to the MuxWebhook function. Be sure to query logs from the past 1 hour or longer. You can also use this query to include only Errors.</li> </ul>"},{"location":"dev/#cloudinary","title":"Cloudinary","text":"<ol> <li>Sign up for Cloudinary.</li> <li> <p>Create two upload presets here, one for images and one for videos.</p> <p>You can learn about upload presets here.</p> <ol> <li> <p>On the General panel, use this configuration for images:     <pre><code>- Name: \"frankly-image-default\" (or whatever you'd like)\n- Signing mode: Unsigned\n- Disallow public ID: \u2714\ufe0f\n- Asset folder: empty\n- Generated public ID: Auto-generate\n- Generated display name: Use the last segment of the public ID\n</code></pre></p> <ol> <li>Now, on the Transform panel, under \"Incoming transformation\", enter <code>c_crop,g_custom</code> and click Save. </li> </ol> <p>These settings are required so that users are able to crop images. They also ensure that all images, cropped or not, are compressed before storage).</p> </li> <li> <p>On the General panel, use this configuration for videos:     <pre><code>- Name: \"frankly-video-default\" (or whatever you'd like)\n- Signing mode: Unsigned\n- Disallow public ID: \u2714\ufe0f\n- Asset folder: \"videos/uploads\" (this value doesn't matter, just somewhere unique to store your videos)\n- Generated public ID: Auto-generate\n- Generated display name: Use the last segment of the public ID\n</code></pre></p> <ol> <li>Click Save.</li> </ol> </li> </ol> </li> <li> <p>Now update the following in <code>client/.env</code>:</p> <p>Your <code>CLOUDINARY_CLOUD_NAME</code> is found here under \"Product environment cloud name\".</p> </li> </ol> <pre><code>CLOUDINARY_IMAGE_PRESET=frankly-image-default (or name you used)\nCLOUDINARY_VIDEO_PRESET=frankly-video-default\nCLOUDINARY_DEFAULT_PRESET=frankly-video-default\nCLOUDINARY_CLOUD_NAME=&lt;value&gt;\n</code></pre>"},{"location":"dev/#sendgrid","title":"SendGrid","text":"<ul> <li>Uses a Firestore extension. Emails definitions are written to the firestore collection sendgridemail.</li> <li>Configure the firestore extension \"Trigger Email\" firebase/firestore-send-email@0.1.9 with your sendgrid info</li> </ul>"},{"location":"dev/#stripe","title":"Stripe","text":"<p>Stripe is currently disabled for the platform. The following instructions will apply if you choose to enable Stripe:</p> <ul> <li>Set your Stripe secret key in functions config by replacing placeholder values in the following command:</li> </ul> <pre><code>firebase functions:config:set stripe.connected_account_webhook_key=\"&lt;YOUR_CONNECTED_ACCOUNT_WEBHOOK_SECRET_KEY&gt;\" stripe.pub_key=\"&lt;YOUR_STRIPE_PUBLISHABLE_KEY&gt;\" stripe.secret_key=\"&lt;YOUR_STRIPE_SECRET_KEY&gt;\" stripe.webhook_key=\"&lt;YOUR_WEBHOOK_SECRET_KEY&gt;\"\n</code></pre> <ul> <li>Set up products for each type with a metadata field \"plan_type\" of individual, club, pro and prices for each one</li> </ul>"},{"location":"dev/#running-and-building-the-client","title":"\ud83d\udc26 Running and building the Client","text":"<p>\u2754 But first, if using, have you setup and run the emulators?</p> <p>Recommended instructions (debug configs)</p> <p>In general, you can use the configs defined in <code>.vscode/launch.json</code> to run debug mode. We have defined 2 environments for you:</p> <ol> <li>Client</li> <li>\ud83c\udf1f Client Dev (Emulators) - this connects to functions, firestore, database, and auth emulators </li> </ol> <p>Note</p> <p>The default debug platform is Web (Chrome), so please ensure it is selected as the target platform when running. We do not currently officially support any other platform.</p>"},{"location":"dev/#env-file","title":".env File","text":"<p>You will need to create a .env file for client configuration. Copy <code>client/.env.example.local</code> to <code>client/.env</code> and update the missing secrets marked with <code>&lt;value&gt;</code> accordingly. The VSCode profiles assume the .env file lives in the <code>client</code> directory.</p> <p>You can also add an <code>EMULATORS</code> environment variable to override the default Emulators profile behavior of running <code>firestore, auth, functions, database</code>. Set the value to any desired combination of emulators.</p>"},{"location":"dev/#manual-instructions","title":"Manual instructions","text":"<p>If you want to use emulators, ensure you start the emulators first. Then run the following commands in the <code>/client</code> directory.</p> <p>To run the app with backend pointing at staging. <pre><code>flutter run -d chrome --release --web-renderer html -t lib/main.dart --dart-define-from-file=.env\n</code></pre></p> <p>To run the app with locally running functions, firestore, and auth emulators <pre><code>flutter run -d chrome --release --web-renderer html -t lib/dev_emulators_main.dart --dart-define-from-file=.env\n</code></pre></p>"},{"location":"dev/#supported-browsers","title":"Supported browsers","text":"<p>The client app runs only on the Flutter web platform. Flutter uses Chrome for debugging web apps, but it does support all major browsers in production Web FAQ | Flutter; Chrome, Firefox, Safari, Edge.</p>"},{"location":"dev/#testing","title":"Testing","text":""},{"location":"dev/#end-to-end-tests","title":"End-to-End Tests","text":"<p>See instructions here for developing and running end-to-end Playwright tests.</p>"},{"location":"dev/#flutter-unit-tests","title":"Flutter Unit Tests","text":"<p>The <code>client/test</code> directory holds Flutter unit and widget tests.</p> <p>To run existing tests, you can run the following command from the <code>client/test</code> directory:</p> <pre><code>flutter pub run build_runner build\ncd ../\nflutter test --platform chrome\n</code></pre> <p>To run newly added tests: <pre><code>flutter test &lt;optional path to test files&gt;\n</code></pre></p> <p>To run unit tests with locally generated HTML coverage report: <pre><code>flutter test --coverage &amp;&amp; format_coverage --in=coverage &amp;&amp; genhtml coverage/lcov.info -o coverage/html\n</code></pre></p>"},{"location":"e2e/","title":"\ud83e\uddf0 End-to-End Testing with Playwright","text":"<p>This directory contains Playwright tests for some of the product test scenarios.</p>"},{"location":"e2e/#configuring-playwright","title":"Configuring Playwright","text":"<p>The Playwright configuration file <code>playwright.config.ts</code> specifies, among other things, the base URL for the instance to be tested and the devices on which to test. The file is currently configured to run tests using Chromium, Firefox, and Webkit. Playwright also emulates mobile browsers and has a long list of devices that can be added to simulate various phone types.</p>"},{"location":"e2e/#running-tests-locally","title":"Running Tests Locally","text":"<p>Follow these steps to set up your environment for running Playwright:</p> <ol> <li>Create a .env file in the e2e directory. At a minimum, this file should contain the base URL and the credentials for two accounts that can sign in to the instance you are testing using an email account. The global setup script discussed below creates a test community called ASML Testing that many of the tests use. The \"Owner\" account will be the owner of this acccount and the \"Member\" account will be a member (for role-based testing). Future roles can be configured in a similar manner as tests are added.</li> </ol> <p>\u26a0\ufe0f Note: The global setup script (currently <code>global.setup.ts</code>) will need to be modified to create these accounts on a clean deployment when we introduce CD. For now, it is assumed that these users are already registered.</p>"},{"location":"e2e/#env","title":"<code>.env</code>","text":"<pre><code>BASE_URL=http://localhost:5000\nTEST_OWNER_USER_NAME=someone@gmail.com\nTEST_OWNER_PASSWORD=heresapassword\nTEST_MEMBER_USER_NAME=someonelse@gmail.com\nTEST_MEMBER_PASSWORD=anotherpassword\n</code></pre> <ol> <li> <p>Run <code>npm install</code> from the e2e directory to install Playwright and its dependencies.</p> </li> <li> <p>Run <code>npx playwright install</code> to install Playwright's default browsers.</p> </li> <li> <p>Run firestore, functions, auth, and database emulators if testing locally.</p> </li> </ol>"},{"location":"e2e/#playwright-global-setup","title":"Playwright Global Setup","text":"<p>Playwright allows you to specify global setup and teardown scripts that run once before and after an entire test suite. Our Playwright configuration file introduces a dependency on the \"Setup\" project, which is currently configured to match any file ending in .setup.ts. Right now, this matches <code>tests/global.setup.ts</code> This script has two important functions:</p> <ol> <li>If BASE_URL is not localhost, it signs in to the browser using the 'Owner' credentials, then writes the browser authentication data from local storage (and IndexedDB on Chrome) to the file <code>e2e/.auth/user.json</code> (if it does not already exist). Playwright's authentication mechanism reads from this file (path configured in <code>playwright.config.ts</code>) to automatically authenticate tests by repopulating test browsers with the stored state. This allows us to run tests without having to log in through the app every time. This doesn't work when running on localhost using the auth emulator, because index.html is configured to clear indexedDB on page load due to an issue with the firebase_auth library.</li> <li>It creates the community <code>ASML Testing-[random number]</code>, which many of the tests use, and sets environment variables for test interaction. The community will not be created if the following variables are set to point to an existing community in <code>.env</code>. These values can be set to any existing community. Each developer should use a unique community URL.</li> </ol>"},{"location":"e2e/#env_1","title":"<code>.env</code>","text":"<pre><code>TEST_COMMUNITY_NAME='ASML Testing'\nTEST_COMMUNITY_TAGLINE='Doing all the testing'\nTEST_COMMUNITY_URL='http://localhost:5000/space/1qOsSScDzRy51tvwmjKS'\n</code></pre>"},{"location":"e2e/#running-tests-from-vscode","title":"Running Tests from VSCode","text":"<p>The Playwright extension for VSCode adds a handy testing panel that allows you to select the devices/browsers to use for text execution, as well as whether to show the browser during text execution, which is good for debugging and fun for demos. Note that the above-mentioned Global setup script will only run if the \"setup\" box under Projects is checked. If you have run once to generate a <code>.auth/user.json</code> file and you have the test community environment variables set to some community you want to use, you should not need to run setup.</p> <p>From the Test Explorer or regular Explorer, you can then select one or more tests to run. Results are displayed in the \"Test Results\" window.</p> <p>\u26a0\ufe0f Note: The default configuration assumes you are running the Client Dev (Emulators) profile locally prior to launching a test. The <code>.vscode/launch.json</code> file is configured to start the Flutter client on port 5000. To change the baseURL to point to another instance, simply edit the BASE_URL property in your env file.</p> <p></p>"},{"location":"e2e/#running-tests-from-command-line","title":"Running Tests from Command Line","text":"<p>You can run the entire test suite or a single test from the command line as well.</p> <p>\u26a0\ufe0f Note: The global setup files will run once for each command line execution, but the current code is written to eliminate overhead by checking for the presence of <code>.auth/user.json</code> (when not testing localhost) and TEST_COMMUNITY environment variables in <code>.env</code></p> <p>Run all tests:</p> <pre><code>foo@e2e:~$ npx playwright test\n</code></pre> <p>Run a single test file:</p> <pre><code>foo@e2e:~$ npx playwright test tests/event/rsvp-event.spec.ts\n</code></pre> <p>Run a single test within a file: The -g command line option matches individual tests within a file by regular expression</p> <pre><code>foo@e2e:~$ npx playwright test tests/event/rsvp-event.spec.ts -g \"RSVP to a public event\"\n</code></pre>"},{"location":"e2e/#viewing-test-results","title":"Viewing Test Results","text":"<p>A test report will be generated at the end of test execution and displayed in a browser. Only the most recent test results are stored in the <code>test-results</code> folder and can be accessed by running:</p> <pre><code>foo@e2e:~$ npx playwright show-report e2e/playwright-report\n</code></pre> <p>Test results are also displayed in the \"Test Results\" window when running in VSCode.</p>"},{"location":"e2e/#parallel-execution","title":"Parallel Execution","text":"<p>Playwright supports parallel execution, and the tests currently should be able to run with multiple parallel workers (individual tests should not be relying on any sort of shared state that could be modified). The workers property can be configured in <code>playwright.config.ts</code> or passed as a parameter when running from command line:</p> <pre><code>foo@e2e:~$ npx playwright test --workers 4\n</code></pre>"},{"location":"e2e/#developing-playwright-tests","title":"Developing Playwright Tests","text":"<p>It is beyond the scope of this README to provide details on how to write tests with Playwright generally. However, there are currently several things to keep in mind when creating or modifying Playwright tests specifically for our application:</p> <ol> <li>It is currently not possible for Playwright to identify any individual web elements in our Flutter app without enabling Flutter semantics, which creates a default Semantics tree in the DOM that allows Playwright Locators to find many of the elements they need to interact with. Until we properly address Semantics in the app, the test code needs to press the hidden \"Enable accessibility\" button on every page of our app. We use a test fixture defined in <code>custom-test-fixture.ts</code> to achieve this on every page load. All tests must use this fixture. Also note that this fixture contains some code for copying Playwright authentication data into IndexedDB on Chrome, as Playwright does not currently do this (see here for more information).</li> </ol> <p>To use the fixture, simply make sure you are importing 'test' from the correct location. Example: </p> <p>Additionally, test creation can be simplified by using the Record capabilities in VSCode. However, accessibility must be enabled on the web pages for this to work as well. The easiest way to make this work is to temporarily modify the code to start with a default Semantics tree. Edit <code>client/lib/app.dart</code> as follows:</p>"},{"location":"e2e/#appdart","title":"<code>app.dart</code>","text":"<p>You can also trigger the hidden Enable Accessibility button by opening console in Chrome DevTools and executing <code>document.querySelector('flt-semantics-placeholder').click()</code></p> <ol> <li> <p>We have adopted Playwright's recommended Page Object Model to encapsulate the details of locating individual UI elements. Tests should not be using Playwright Locators directly. Rather, each page or dialog of the app should be modeled as a page in the <code>pages</code> folder, and tests should interact directly with that model.</p> </li> <li> <p>There is currently no way to specify a date or time when creating an event. As a result, new events are created with today's date, and the next hour as the start time. The current event pages are coded to handle this, but results may be inconsistent if there is more than one event with the same template and date.</p> </li> <li> <p>As of now, tests must tear down anything they create. We may decide later to create more default objects like events and templates in the global setup (to reduce test execution time), but care must be taken to avoid issues when running tests with parallel workers. Playwright has some recommendations for dealing with a shared state system during parallel execution.</p> </li> <li> <p>Some UI elements are still not identifiable by the default Semantics tree. You may need to modify the code you are testing to add semantic labels. Many Flutter widgets have a semanticsLabel property, but if not, you can modify build methods to wrap widgets in a Semantics object as in the following example:</p> </li> </ol> <pre><code>    child: Semantics(label:'Submit Chat Button',button: true,\n              child: ActionButton(\n                minWidth: 20,\n                color: context.theme.colorScheme.primary,\n                controller: _sendController,\n                onPressed: canSubmit ? _sendMessage : null,\n                disabledColor: context.theme.colorScheme.onPrimary.withOpacity(0.3),\n                height: isMobile ? 50 : 55,\n                child: Icon(\n                  Icons.send,\n                  color: canSubmit ? context.theme.colorScheme.onPrimary : context.theme.colorScheme.onPrimaryContainer,\n                ),\n                ),\n              ),\n</code></pre>"},{"location":"faq/","title":"\u2753 Troubleshooting and FAQ","text":""},{"location":"faq/#flutter-installation","title":"Flutter installation","text":"<ul> <li>If you install Android and you see this output when running <code>flutter doctor</code>:   <pre><code>[!] Android toolchain - develop for Android devices (Android SDK version 35.0.0)\n\u2717 cmdline-tools component is missing\nRun path/to/sdkmanager --install \"cmdline-tools;latest \n</code></pre>   Run the following steps: <ol> <li>Open Android Studio </li> <li>Select More Actions &gt; SDK Manager </li> <li>Under the SDK Tools tab, select Android SDK Command-line Tools (latest) (see screenshot below). </li> <li>Click Apply to proceed with installation.</li> </ol> </li> <li>When activating the FlutterFire CLI (step 1.3 in the Flutter doc: <code>dart pub global activate flutterfire_cli</code>), you may see a prompt to update your path:   <pre><code>Warning: Pub installs executables into $HOME/.pub-cache/bin, which is not on your path.\n</code></pre>   You can fix that by adding this to your shell's config file (.zshrc, .bashrc, .bash_profile, etc.):   <pre><code>export PATH=\"$PATH\":\"$HOME/.pub-cache/bin\"\n</code></pre>   After adding the recommended export to your ~/.zshrc file, restart all terminal windows.</li> </ul>"},{"location":"faq/#cloud-functions-emulator","title":"Cloud Functions Emulator","text":"<ul> <li>Functions fail to emulate: If you run <code>firebase emulators:start --only ...</code> and you get a message saying that function emulation failed to start, you may need to run <code>firebase init functions</code> on first launch. Use the following selections after running:</li> </ul> <pre><code>? What language would you like to use to write Cloud Functions? JavaScript\n? Do you want to use ESLint to catch probable bugs and enforce style? Yes\n? File functions/package.json already exists. Overwrite? No\ni  Skipping write of functions/package.json\n\u2714  Wrote functions/.eslintrc.js\n\u2714  Wrote functions/index.js\n? File functions/.gitignore already exists. Overwrite? No\ni  Skipping write of functions/.gitignore\n? Do you want to install dependencies with npm now? Yes\n</code></pre> <p>If you see an error message indicating ports are taken such as the one below, run <code>sudo lsof -i tcp:&lt;PORT_ID&gt;</code> to get the PID, then run <code>kill -9 &lt;PID&gt;</code> to stop the running emulator.</p> <pre><code>i  emulators: Starting emulators: auth, functions, firestore, database, pubsub\n\u26a0  pubsub: Port 8085 is not open on 0.0.0.0, could not start Pub/Sub Emulator.\n\u26a0  pubsub: To select a different host/port, specify that host/port in a firebase.json config file:\n      {\n        // ...\n        \"emulators\": {\n          \"pubsub\": {\n            \"host\": \"HOST\",\n            \"port\": \"PORT\"\n          }\n        }\n      }\ni  emulators: Shutting down emulators.\n\nError: Could not start Pub/Sub Emulator, port taken.\n</code></pre> <ul> <li>Integrations not working: Third-party services will not work the Functions Emulator unless you have created the file <code>firebase/functions/.runtimeconfig.json</code>. Please refer to the sub-section \ud83d\udd11 Using Config in Emulators for further detail.</li> </ul>"}]}