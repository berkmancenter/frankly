rules_version = '2';

service cloud.firestore {
    // See https://stackoverflow.com/questions/52641934/firebase-firestore-security-rules-for-public-and-private-collections
    match /databases/{database}/documents {

        function hasAuth() {
            return request.auth != null && request.auth.uid != null;
        }

        function isDocCreator(doc) {
            return hasAuth() && request.auth.uid == doc.data['creatorId'];
        }

        function isPublic() {
            return resource.data.get('isPublic', false) == true;
        }

        function isParticipant(eventPath) {
            return hasAuth() && get(path(eventPath + '/event-participants/' + request.auth.uid)).data['status'] == 'active';
        }

        function getOrDefault(doc, key, defaultValue) {
            let result = (doc == null || doc.data == null) ? null : doc.data.get(key, defaultValue);
            return (result == null) ? defaultValue : result;
        }

        function getMembershipStatus(communityId) {
            let statusDoc = get(/databases/$(database)/documents/memberships/$(request.auth.uid)/community-membership/$(communityId));
            return getOrDefault(statusDoc, 'status', 'nonmember');
        }

        function isCommunityCreator(communityId) {
            return hasAuth()
                   && getAfter(/databases/$(database)/documents/community/$(communityId)).data.get('creatorId', '') == request.auth.uid;
        }

        function isOwner(status) {
            return status in ['owner'];
        }

        function isAdmin(status) {
            return status in ['owner', 'admin'];
        }

        function isMod(status) {
            return status in ['owner', 'admin', 'mod'];
        }

        function isFacilitator(status) {
            return status in ['owner', 'admin', 'mod', 'facilitator'];
        }

        function requiresApprovalToJoin(communityId) {
            return 'requireApprovalToJoin' in getOrDefault(get(/databases/$(database)/documents/community/$(communityId)), 'enabledFeatureFlags', []);
        }

        // TODO: Figure out why this is causing updating membership to fail on communities that require
        // approval
        function hasApprovalToJoin(communityId) {
            // let approvalStatus = getOrDefault(get(/databases/$(database)/documents/community/$(communityId)/join-requests/$(request.auth.uid)), 'status', '');
            return true;
        }

        match /testing/{testDoc} {
            allow read: if true;
            allow write: if false;
        }

        match /external-partners/{partner} {
            allow read: if hasAuth();
            allow write: if false;
        }

        match /publicUser/{userId} {
            allow create: if hasAuth() && request.auth.uid == userId;
            allow delete: if hasAuth() && request.auth.uid == userId;
            allow update: if hasAuth() && request.auth.uid == userId && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['appRole']));

            allow get: if hasAuth();
            allow list: if request.query.fields.size() == 1 && request.query.fields.hasAll(['agoraId']);
        }


        match /publicUser/{userId}/community-tags/{tagId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow read: if hasAuth();
        }

        match /privateUserData/{userId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow get: if hasAuth() && request.auth.uid == userId;
        }

        match /privateUserData/{userId}/communityUserSettings/{communityId} {
            allow write: if hasAuth() && request.auth.uid == userId;

            allow get: if hasAuth() && request.auth.uid == userId;
        }

        // Community-Tag collection group
        match /{path=**}/community-tags/{tagId} {
            allow list: if hasAuth();
        }

        // Template collection group for featured templates query
        // TODO: Secure this so that templates from private communities are not accessible.
        match /{path=**}/templates/{templateId} {
            allow list: if hasAuth();
        }

        // NOT TESTED
        // Event collection group
        match /{path=**}/events/{eventId} {
            allow list: if hasAuth() && isPublic();
            allow list: if hasAuth() && isDocCreator(resource);
            allow list: if hasAuth() && isAdmin(getMembershipStatus(resource.data.communityId));
            // Figure out how to list based on participant status.
            // allow list: if hasAuth() && isParticipant(getEventPath());
            allow list: if hasAuth();
        }

        // NOT TESTED
        // Participants collection group
        match /{path=**}/event-participants/{participantId} {
            allow list: if hasAuth() && resource.data['id'] == request.auth.uid;
        }

        // Community
        match /community/{communityId} {
            function isCommunityMember(communityId) {
                let memberSet = ['member', 'facilitator', 'mod', 'admin', 'owner'].toSet();
                return hasAuth() && getMembershipStatus(communityId) in memberSet;
            }

             function isCommunityFacilitator() {
                return hasAuth() && isFacilitator(getMembershipStatus(communityId));
            }
            function isCommunityMod() {
                return hasAuth() && isMod(getMembershipStatus(communityId));
            }

            function isCommunityAdmin() {
                return hasAuth() && isAdmin(getMembershipStatus(communityId));
            }

            // In order to show on screen when a chat comes from an admin we include their current membership level
            // in all chats. This verifies that what the document claims is their membership, is in fact their membership.
            function verifyMembershipSnapshot() {
                let status = getOrDefault(request.resource, 'membershipStatusSnapshot', null);

                return !isMod(status) || (isMod(status) && getMembershipStatus(communityId) == status);
            }

            allow create: if false;
            allow update: if false;

            allow get: if hasAuth();

            allow list: if hasAuth() && isPublic();
            allow list: if hasAuth() && request.auth.uid in resource.data.get('members', []);
            allow list: // TODO: Figure out a way to handle looking up communities display ID.
            // This is required currently since we list communities by display ID.
                if true;

            // Discussion Threads
            match /discussion-threads/{discussionThreadId} {
                allow read, write: if hasAuth();

                // Discussion Thread Comments
                match /discussion-thread-comments/{discussionThreadCommentId} {
                    allow read, write: if hasAuth();
                }
            }

            // Chat
            match /chats/{messageId=**} {
                allow create: if isCommunityMember(communityId) && isDocCreator(request.resource)
                                 && verifyMembershipSnapshot();

                allow update: if hasAuth() && (isDocCreator(resource) || isCommunityMod());

                allow read: if hasAuth();
            }

            // Featured
            match /featured/{featuredId=**} {
                allow write: if isCommunityAdmin();
                allow read: if hasAuth();
            }

            // Announcements
            match /announcements/{annoucementId} {
                allow create: if isCommunityAdmin() && isDocCreator(request.resource);
                allow update: if isCommunityAdmin();

                allow read: if hasAuth();
            }

            // Resources
            match /community-resources/{resourceId} {
                allow write: if isCommunityAdmin();
                allow read: if hasAuth();

                // Resources-tags
                match /community-tags/{tagId} {
                    allow write: if isCommunityAdmin();
                    allow read: if hasAuth();
                }
            }

            // Community-Tags
            match /community-tags/{tagId} {
                allow write: if isCommunityAdmin();
                allow read: if hasAuth();
            }

            match /templates/{templateId} {
                // TODO: Update template creation to check the Community feature flags for unofficial templates.
                allow create: if isCommunityMember(communityId) && isDocCreator(request.resource);
                allow update: if isCommunityMod() || isDocCreator(request.resource);

                allow read: if hasAuth();

                function getTemplateData() {
                    return get(/databases/$(database)/documents/community/$(communityId)/templates/$(templateId));
                }

                // Template Community-Tags
                match /community-tags/{tagId} {
                    allow write: if (isCommunityMod() || isDocCreator(getTemplateData()));
                    allow read: if hasAuth();
                }

                // Events and live meetings
                match /events/{eventId} {

                    function getEventData() {
                        return get(/databases/$(database)/documents/community/$(communityId)/templates/$(templateId)/events/$(eventId));
                    }

                    function getEventDataAfter() {
                        return getAfter(/databases/$(database)/documents/community/$(communityId)/templates/$(templateId)/events/$(eventId));
                    }

                    function getEventPath() {
                        return '/databases/' + database + '/documents/community/' + communityId + '/templates/' + templateId + '/events/' + eventId;
                    }

                    function isHosted() {
                        let eventData = getEventData().data;

                        // TODO(danny): Test this 'hosted' codepath
                        let eventType = eventData.get('eventType', null);
                        let liveStreamInfo = eventData.get('liveStreamInfo', null);

                        // Legacy events may have eventType == null so we can tell they are
                        // hosted if they dont have livestreaminfo.
                        return eventType == 'hosted' || (eventType == null && liveStreamInfo == null);
                    }

                    // User can create a public event if they are a member of that Community.
                    // OR
                    // They can create a private one even if they aren't a member.
                    allow create: if (isCommunityMember(communityId) || request.resource.data.get('isPublic', false) == false)
                                     && isDocCreator(request.resource);

                    allow update: if isDocCreator(resource)
                                     || isCommunityMod();
                                  

                    allow list: if hasAuth() && isPublic();
                    allow list: if hasAuth() && isDocCreator(resource);
                    allow list: if hasAuth() && isParticipant(getEventPath());

                    allow get: if hasAuth();

                    match /event-participants/{participantId} {
                        allow write: if isCommunityMod()
                                        || isDocCreator(getEventDataAfter())
                                        || request.auth.uid == participantId;
                        allow update: if isCommunityFacilitator() && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status','lastUpdatedTime']));

                        allow read: if hasAuth() && (isHosted() || isCommunityMod() || request.auth.uid == participantId);
                    }

                    // Chat
                    match /chats/{messageId=**} {
                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());

                        allow create: if hasAuth() && verifyMembershipSnapshot() && (isParticipant(getEventPath()) || isCommunityMod());

                        allow update: if hasAuth() && (isDocCreator(resource) || isCommunityMod());
                    }

                    // Event Messages
                    match /event-messages/{eventMessageId} {
                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());
                        allow delete: if hasAuth() && (isDocCreator(resource) || isCommunityMod());
                    }

                    // User Suggestions
                    match /user-suggestions/{suggestionId} {
                        function onlyVotedYourself(field) {
                            let original = resource.data.get(field, []).toSet();
                            let updated = request.resource.data.get(field, []).toSet();

                            let originalDiff = original.difference(updated);
                            let updatedDiff = updated.difference(original);

                            let combinedDiff = updatedDiff.union(originalDiff);
                            return combinedDiff.size() == 0 || combinedDiff == [request.auth.uid].toSet();
                        }

                        allow create: if hasAuth() && isDocCreator(request.resource) && (isParticipant(getEventPath()) || isCommunityMod());
                        allow update: if hasAuth() && (isDocCreator(resource) || (onlyVotedYourself('upvotedUserIds') && onlyVotedYourself('downvotedUserIds')));
                        allow delete: if hasAuth() && (isDocCreator(resource) || isCommunityMod() || isDocCreator(getEventData()));
                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());
                    }

                    match /live-meetings/{meetingId} {
                        allow create, update: if hasAuth() && (isDocCreator(getEventDataAfter()) || isCommunityMod());

                        allow get: if hasAuth() && (isDocCreator(getEventData()) || isCommunityMod());
                        allow get: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());

                        match /breakout-room-sessions/{sessionId=**} {
                            allow create, update: if hasAuth() && (isDocCreator(getEventDataAfter()) || isCommunityMod());

                            allow read: if hasAuth() && isDocCreator(getEventData());
                            allow read: if hasAuth() && isParticipant(getEventPath());
                            allow read: if hasAuth() && isCommunityMod();

                            match /breakout-rooms/{breakoutRoomId} {
                                match /live-meetings/{liveMeetingId} {
                                    match /participant-agenda-item-details/{agendaItemId}/participant-details/{userId} {
                                        allow write: if hasAuth() && (request.auth.uid == userId || isCommunityMod() || isDocCreator(getEventData())) && isParticipant(getEventPath());
                                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());
                                    }

                                    // TODO: Only allow reading and writing if you are in this breakout room
                                    match /chats/{chatId}/messages/{messageId} {
                                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());

                                        allow create: if hasAuth() && verifyMembershipSnapshot() && isDocCreator(request.resource) && (isParticipant(getEventPath()) || isCommunityMod());

                                        allow update: if hasAuth() && (isDocCreator(resource) || isCommunityMod());
                                    }

                                    match /proposals/{proposalId} {
                                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod()) && resource.data.get('targetUserId', null) != request.auth.uid;
                                    }

                                    match /user-suggestions/{suggestionId} {
                                        function onlyVotedYourselfBreakouts(field) {
                                            let original = resource.data.get(field, []).toSet();
                                            let updated = request.resource.data.get(field, []).toSet();

                                            let originalDiff = original.difference(updated);
                                            let updatedDiff = updated.difference(original);

                                            let combinedDiff = updatedDiff.union(originalDiff);
                                            return combinedDiff.size() == 0 || combinedDiff == [request.auth.uid].toSet();
                                        }

                                        allow create: if hasAuth() && isDocCreator(request.resource) && (isParticipant(getEventPath()) || isCommunityMod());
                                        allow update: if hasAuth() && (isDocCreator(resource) || (onlyVotedYourselfBreakouts('upvotedUserIds') && onlyVotedYourselfBreakouts('downvotedUserIds')));
                                        allow delete: if hasAuth() && (isDocCreator(resource) || isCommunityMod() || isDocCreator(getEventData()));
                                        allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());
                                    }
                                }
                            }
                        }

                        match /user-agenda-items-progress/{userId} {
                            allow write, read: if hasAuth() && request.auth.uid == userId && isParticipant(getEventPath());
                            allow read: if hasAuth() && (isDocCreator(getEventDataAfter()) || isCommunityMod());
                        }

                        match /participant-agenda-item-details/{agendaItemId}/participant-details/{userId} {
                            allow write: if hasAuth() && (request.auth.uid == userId || isCommunityMod() || isDocCreator(getEventData())) && isParticipant(getEventPath());
                            allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod());
                        }

                        match /ratings/{userId} {
                            allow write, read: if hasAuth() && request.auth.uid == userId && isParticipant(getEventPath());
                        }

                        match /proposals/{proposalId} {
                            allow read: if hasAuth() && (isParticipant(getEventPath()) || isCommunityMod()) && resource.data.get('targetUserId', null) != request.auth.uid;
                        }
                    }

                    match /private-live-stream-info/{liveStreamId} {
                        allow read: if hasAuth() && isCommunityAdmin();
                        allow create: if hasAuth() && isCommunityAdmin();
                    }
                }
            }

            match /join-requests/{userId} {
                allow get: if hasAuth() && (request.auth.uid == userId || isCommunityMod());
                allow create: if hasAuth() && request.auth.uid == userId && request.resource.data.get('status', '') == 'requested';
                allow list: if hasAuth() && isCommunityMod();
                allow update: if false;
            }
        }

        // CommunityTagDefinition
        match /community-tag-definitions/{definitionId} {
            allow get, create, list: if hasAuth();
        }

        // CommunityTagDefinition
        match /community-tag-definitions/{definitionId} {
            allow get, create, list: if hasAuth();
            allow update: if false;
        }

        match /{path=**}/community-membership/{communityId} {
            allow list: if request.auth != null;
        }

        match /memberships/{userId}/community-membership/{communityId} {
            // Verify user can make more elevated membership changes
            function canChangeElevatedMembership(targetStatus) {
                let requesterStatus = getMembershipStatus(communityId);
                let currentStatus = getOrDefault(resource, 'status', 'nonmember');

                // Owners can modify existing members
                return  (currentStatus != 'nonmember' && (isOwner(requesterStatus) || (isAdmin(requesterStatus) && !('owner' in [targetStatus, currentStatus]))));
            }

            

            function canChangeSelfStatus(targetStatus) {
                // Statuses that can be self-set by anyone
                let requiresApproval = requiresApprovalToJoin(communityId) && !hasApprovalToJoin(communityId);
                let selfStatuses = (requiresApproval == true) ? ['attendee', 'nonmember'] : ['member', 'attendee', 'nonmember'];

                return (targetStatus in selfStatuses) || (targetStatus == 'owner' && resource == null && isCommunityCreator(communityId));
            }

            function isValidMemberUpdate() {
                let targetStatus = getOrDefault(request.resource, 'status', null);
                return (userId == request.auth.uid && canChangeSelfStatus(targetStatus)) || canChangeElevatedMembership(targetStatus);
            }

            allow read: if request.auth.uid != null;
            allow write: if hasAuth() && isValidMemberUpdate();
        }

        match /external-partners/{partnerId} {
            // Currently writes are handled manually in firebase console web UI.
            allow write: if false;
            allow read: if hasAuth();
        }

        match /partner-agreements/{id} {

            function checkInitialUserId() {
                let initialUserId = getOrDefault(resource, 'initialUserId', null);
                return initialUserId == null || initialUserId == request.auth.uid;
            }

            allow write: if false;

            // Allow read if user is admin of linked community, or (if no linked community) if user is the person who initiated onboarding
            allow read: if hasAuth() && (getOrDefault(resource, 'communityId', null) == null && checkInitialUserId()) || isAdmin(getMembershipStatus(resource.data.communityId));
        }

        match /stripeUserData/{userId} {
            allow write: if false;
            allow get: if hasAuth() && request.auth.uid == userId;

            match /subscriptions/{subscriptionId} {
                allow write: if false;
                allow get: if hasAuth() && request.auth.uid == userId;
                allow list: if hasAuth() && request.auth.uid == userId;
            }
        }

        match /plan-capability-lists/{id} {
            allow list: if false;
            allow write: if false;
            allow read: if false;
        }
    }
}